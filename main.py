import aiosqlite
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F
import qfile

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–º–µ–Ω–∏—Ç–µ "YOUR_BOT_TOKEN" –Ω–∞ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç BotFather
API_TOKEN = '7789668630:AAGSlEkV_y1k9j7SsOP5_tXXLMZNGCivyCE'

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –ó–∞–¥–∞–¥–∏–º –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME = 'quiz_bot.db'


# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–≤–∏–∑–∞
quiz_data = qfile.question_file('question.json')

def generate_options_keyboard(answer_options, right_answer):
    builder = InlineKeyboardBuilder()

    for option in answer_options:
        builder.add(types.InlineKeyboardButton(
            text=option,
            callback_data="right_answer" if option == right_answer else "wrong_answer")
        )
        

    builder.adjust(1)
    return builder.as_markup()


@dp.callback_query(F.data.in_({"right_answer", "wrong_answer"}))
async def handle_answer(callback: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    user_answer = None
    for row in callback.message.reply_markup.inline_keyboard:
        for button in row:
            if button.callback_data == callback.data:
                user_answer = button.text
                break
        if user_answer:
            break

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    current_question_index = await get_quiz_index(callback.from_user.id)
    correct_option = quiz_data[current_question_index]['correct_option']
    correct_answer = quiz_data[current_question_index]['options'][correct_option]

    # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if callback.data == "right_answer":
        await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_answer}\n–í–µ—Ä–Ω–æ!")
    else:
        await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_answer}\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
    current_question_index += 1
    await update_quiz_index(callback.from_user.id, current_question_index)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞
    if current_question_index < len(quiz_data):
        await get_question(callback.message, callback.from_user.id)
    else:
        # –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = callback.from_user.username or callback.from_user.first_name
        score = current_question_index  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        await update_leaderboard(callback.from_user.id, username, score)

        # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
        await show_leaderboard(callback.message)
        await callback.message.answer("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑!", reply_markup=builder.as_markup(resize_keyboard=True))


async def get_question(message, user_id):

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_question_index = await get_quiz_index(user_id)
    correct_index = quiz_data[current_question_index]['correct_option']
    opts = quiz_data[current_question_index]['options']
    kb = generate_options_keyboard(opts, opts[correct_index])
    await message.answer(f"{quiz_data[current_question_index]['question']}", reply_markup=kb)


async def new_quiz(message):
    user_id = message.from_user.id
    current_question_index = 0
    await update_quiz_index(user_id, current_question_index)
    await get_question(message, user_id)


async def get_quiz_index(user_id):
     # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     async with aiosqlite.connect(DB_NAME) as db:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.execute('SELECT question_index FROM quiz_state WHERE user_id = (?)', (user_id, )) as cursor:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            results = await cursor.fetchone()
            if results is not None:
                return results[0]
            else:
                return 0


async def update_quiz_index(user_id, index):
    # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)
    async with aiosqlite.connect(DB_NAME) as db:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –µ–µ, –µ—Å–ª–∏ —Å –¥–∞–Ω–Ω—ã–º user_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await db.execute('INSERT OR REPLACE INTO quiz_state (user_id, question_index) VALUES (?, ?)', (user_id, index))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await db.commit()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /quiz
@dp.message(F.text=="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
@dp.message(Command("quiz"))
async def cmd_quiz(message: types.Message):

    await message.answer(f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑!")
    await new_quiz(message)

@dp.message(Command("leaderboard"))
async def cmd_leaderboard(message: types.Message):
    # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
    await show_leaderboard(message)

async def create_table():
    # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)
    async with aiosqlite.connect(DB_NAME) as db:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        await db.execute('''CREATE TABLE IF NOT EXISTS quiz_state (user_id INTEGER PRIMARY KEY, question_index INTEGER)''')
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–∏–¥–µ—Ä–æ–≤
        await db.execute('''CREATE TABLE IF NOT EXISTS leaderboard (user_id INTEGER PRIMARY KEY, username TEXT, score INTEGER)''')
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await db.commit()

async def update_leaderboard(user_id: int, username: str, score: int):
    async with aiosqlite.connect(DB_NAME) as db:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤
        await db.execute('''INSERT OR REPLACE INTO leaderboard (user_id, username, score)
                            VALUES (?, ?, ?)''', (user_id, username, score))
        await db.commit()

async def show_leaderboard(message: types.Message):
    async with aiosqlite.connect(DB_NAME) as db:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async with db.execute('''SELECT username, score FROM leaderboard
                                 ORDER BY score DESC LIMIT 10''') as cursor:
            leaders = await cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π –ª–∏–¥–µ—Ä–æ–≤
    leaderboard_message = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n"
    for i, (username, score) in enumerate(leaders, start=1):
        leaderboard_message += f"{i}. {username}: {score} –æ—á–∫–æ–≤\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(leaderboard_message)



# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await create_table()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())